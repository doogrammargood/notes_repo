#Generated by deepseek. Should be the standard game.

import random

# Define a standard deck with suits
suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
values = [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11]  # 11 represents Ace
deck = [(value, suit) for value in values for suit in suits] * 4  # 4 decks for more realism
random.shuffle(deck)  # Shuffle the deck

# Card counting variables
running_count = 0

def deal_card():
    return deck.pop()

def calculate_hand_value(hand):
    value = sum(card[0] for card in hand)
    # Adjust for Aces if value > 21
    aces = sum(1 for card in hand if card[0] == 11)
    while value > 21 and aces:
        value -= 10
        aces -= 1
    return value

def update_count(card):
    global running_count
    if 2 <= card[0] <= 6:
        running_count += 1
    elif card[0] == 10 or card[0] == 11:
        running_count -= 1

def display_hand(hand):
    return ", ".join(f"{card[0]} of {card[1]}" for card in hand)

class Player:
    def __init__(self, name, bankroll):
        self.name = name
        self.bankroll = bankroll
        self.hands = [[]]  # List of hands (for splitting)
        self.bets = [0]  # List of bets (one per hand)

    def place_bet(self, bet):
        if bet > self.bankroll:
            print("Not enough funds!")
            return False
        self.bankroll -= bet
        self.bets[0] = bet
        return True

    def can_split(self, hand_index):
        return len(self.hands[hand_index]) == 2 and self.hands[hand_index][0][0] == self.hands[hand_index][1][0]

    def split_hand(self, hand_index):
        if not self.can_split(hand_index):
            return False
        if self.bets[hand_index] > self.bankroll:
            print("Not enough funds to split!")
            return False
        # Split the hand
        new_hand = [self.hands[hand_index].pop()]
        self.hands.append(new_hand)
        self.bets.append(self.bets[hand_index])
        self.bankroll -= self.bets[hand_index]
        return True

    def double_down(self, hand_index):
        if len(self.hands[hand_index]) != 2:
            return False
        if self.bets[hand_index] > self.bankroll:
            print("Not enough funds to double down!")
            return False
        self.bankroll -= self.bets[hand_index]
        self.bets[hand_index] *= 2
        return True

def play_blackjack(players):
    global running_count
    dealer_hand = [deal_card(), deal_card()]

    # Deal initial cards to players
    for player in players:
        player.hands = [[deal_card(), deal_card()]]
        player.bets = [player.bets[0]]  # Reset bets for new round

    # Show dealer's up card
    print(f"Dealer's hand: {display_hand([dealer_hand[0]])} and ?")

    # Update count for visible cards
    for card in dealer_hand:
        update_count(card)

    # Players' turns
    for player in players:
        print(f"\n{player.name}'s turn:")
        for hand_index, hand in enumerate(player.hands):
            print(f"Hand {hand_index + 1}: {display_hand(hand)}, Value: {calculate_hand_value(hand)}")
            while True:
                action = input("Do you want to Hit (h), Stand (s), Double Down (d), or Split (p)? ").lower()
                if action == 'h':
                    hand.append(deal_card())
                    print(f"Hand {hand_index + 1}: {display_hand(hand)}, Value: {calculate_hand_value(hand)}")
                    update_count(hand[-1])
                    if calculate_hand_value(hand) > 21:
                        print("Bust!")
                        break
                elif action == 's':
                    break
                elif action == 'd':
                    if player.double_down(hand_index):
                        hand.append(deal_card())
                        print(f"Hand {hand_index + 1}: {display_hand(hand)}, Value: {calculate_hand_value(hand)}")
                        update_count(hand[-1])
                        break
                    else:
                        print("Cannot double down.")
                elif action == 'p':
                    if player.split_hand(hand_index):
                        print(f"Hand {hand_index + 1} split into two hands.")
                        player.hands[hand_index].append(deal_card())
                        player.hands[-1].append(deal_card())
                        print(f"Hand {hand_index + 1}: {display_hand(player.hands[hand_index])}, Value: {calculate_hand_value(player.hands[hand_index])}")
                        print(f"Hand {len(player.hands)}: {display_hand(player.hands[-1])}, Value: {calculate_hand_value(player.hands[-1])}")
                    else:
                        print("Cannot split.")
                else:
                    print("Invalid input. Please enter 'h', 's', 'd', or 'p'.")

    # Dealer's turn
    print(f"\nDealer's hand: {display_hand(dealer_hand)}, Value: {calculate_hand_value(dealer_hand)}")
    while calculate_hand_value(dealer_hand) < 17:
        dealer_hand.append(deal_card())
        print(f"Dealer hits: {display_hand(dealer_hand)}, Value: {calculate_hand_value(dealer_hand)}")
        update_count(dealer_hand[-1])
        if calculate_hand_value(dealer_hand) > 21:
            print("Dealer busts!")
            break

    # Determine outcomes
    dealer_value = calculate_hand_value(dealer_hand)
    for player in players:
        for hand_index, hand in enumerate(player.hands):
            player_value = calculate_hand_value(hand)
            if player_value > 21:
                print(f"{player.name}'s hand {hand_index + 1} busts!")
            elif dealer_value > 21 or player_value > dealer_value:
                print(f"{player.name}'s hand {hand_index + 1} wins!")
                player.bankroll += 2 * player.bets[hand_index]
            elif player_value == dealer_value:
                print(f"{player.name}'s hand {hand_index + 1} pushes.")
                player.bankroll += player.bets[hand_index]
            else:
                print(f"{player.name}'s hand {hand_index + 1} loses.")
        print(f"{player.name}'s bankroll: {player.bankroll}")

    print(f"Running count: {running_count}")

# Main game loop
num_players = int(input("Enter number of players: "))
players = [Player(f"Player {i+1}", 1000) for i in range(num_players)]  # Each player starts with $1000

while True:
    for player in players:
        bet = int(input(f"{player.name}, place your bet (1-{player.bankroll}): "))
        while not player.place_bet(bet):
            bet = int(input(f"{player.name}, place your bet (1-{player.bankroll}): "))
    play_blackjack(players)
    if input("Play again? (y/n): ").lower() != 'y':
        break