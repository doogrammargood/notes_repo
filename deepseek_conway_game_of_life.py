#This code was generated by deepseek on Feb 17, 2025
#prompt is below.
'''Write a Python program to run Conway's 10x10 game of Life with different starting positions where each cell has a certain probability p of starting alive. Do this several times to find the probability that makes the game take as long as possible before repeating a position, on average.'''
import random
import numpy as np
from collections import defaultdict

def generate_initial_grid(p):
    """Generate a 10x10 grid where each cell has a probability p of being alive."""
    return np.random.choice([0, 1], size=(10, 10), p=[1-p, p])

def count_live_neighbors(grid, x, y):
    """Count the number of live neighbors for a given cell."""
    live_neighbors = 0
    for i in range(-1, 2):
        for j in range(-1, 2):
            if i == 0 and j == 0:
                continue
            nx, ny = x + i, y + j
            if 0 <= nx < 10 and 0 <= ny < 10:
                live_neighbors += grid[nx, ny]
    return live_neighbors

def next_generation(grid):
    """Compute the next generation of the grid based on the rules of the Game of Life."""
    new_grid = np.zeros((10, 10), dtype=int)
    for x in range(10):
        for y in range(10):
            live_neighbors = count_live_neighbors(grid, x, y)
            if grid[x, y] == 1:
                if live_neighbors == 2 or live_neighbors == 3:
                    new_grid[x, y] = 1
            else:
                if live_neighbors == 3:
                    new_grid[x, y] = 1
    return new_grid

def simulate_game(p):
    """Simulate the Game of Life starting with a random grid and return the number of steps before a repetition."""
    grid = generate_initial_grid(p)
    seen = defaultdict(int) #ideally, deepseek should comment on what are the keys and values of this dictionary
    step = 0
    while True:
        grid_tuple = tuple(map(tuple, grid))
        if grid_tuple in seen:
            return step
        seen[grid_tuple] = step #We don't seem to reference this number anywhere.
        grid = next_generation(grid)
        step += 1

def find_optimal_probability(num_simulations=100, p_step=0.05):
    """Find the probability p that maximizes the average number of steps before a repetition."""
    p_values = np.arange(0, 1 + p_step, p_step)
    results = {}
    for p in p_values:
        total_steps = 0
        for _ in range(num_simulations):
            total_steps += simulate_game(p)
        avg_steps = total_steps / num_simulations
        results[p] = avg_steps
        print(f"p = {p:.2f}, Average steps before repetition: {avg_steps:.2f}")
    optimal_p = max(results, key=results.get)
    return optimal_p, results[optimal_p]

if __name__ == "__main__":
    optimal_p, max_avg_steps = find_optimal_probability(num_simulations=100, p_step=0.05)
    print(f"\nOptimal Probability: {optimal_p:.2f}")
    print(f"Maximum Average Steps Before Repetition: {max_avg_steps:.2f}")